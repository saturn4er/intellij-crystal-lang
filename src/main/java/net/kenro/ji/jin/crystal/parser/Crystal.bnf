{
    parserClass='net.kenro.ji.jin.crystal.CrystalParser'

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    elementTypeHolderClass='net.kenro.ji.jin.crystal.psi.CrystalElementTypes'

    elementTypeClass='net.kenro.ji.jin.crystal.psi.CrystalElementType'
    tokenTypeClass='net.kenro.ji.jin.crystal.psi.CrystalTokenType'

    psiClassPrefix='Crystal'
    psiImplClassSuffix='Impl'
    psiPackage='net.kenro.ji.jin.crystal.psi'
    psiImplPackage='net.kenro.ji.jin.crystal.psi.impl'
    psiImplUtilClass="net.kenro.ji.jin.crystal.psi.impl.CrystalPsiImplUtil"
    generateTokenAccessors=false

    tokens = [
        LEFT_BRACE =                         "{"
        RIGHT_BRACE =                        "}"
        LEFT_PAREN =                         "("
        RIGHT_PAREN =                        ")"
        LEFT_BRACKET =                       "["
        RIGHT_BRACKET =                      "]"
        PIPE =                               "|"
        DOT =                                "."
        COMMA =                              ","
        EQUAL =                              "="
        EQUAL_EQUAL =                        "=="
        EQUAL_EQUAL_EQUAL =                  "==="
        BACKSLASH =                          "\\"
        RIGHT_ARROW =                        "=>"
        APROX_ARROW =                        "=~"
        NOT_EQUAL =                          "!="
        NOT_APROX =                          "!~"
        NOT =                                "!"
        LEFT_RIGHT_ARROW =                   "<=>"
        LEFT_ARROW =                         "<="
        LEFT_LEFT_ARROW =                    "<<="
        INSERT =                             "<<"
        LESS =                               "<"
        GREATER_EQUAL =                      ">="
        GREATER_GREATER_EQUAL =              ">>="
        GREATER_GREATER =                    ">>"
        GREATER =                            ">"
        PLUS_EQUAL =                         "+="
        PLUS =                               "+"
        MINUS_EQUAL =                        "-="
        MINUS_GREATER =                      "->"
        MINUS =                              "-"
        TIMES_EQUAL =                        "*="
        TIMES_TIMES_EQUAL =                  "**="
        TIMES_TIMES =                        "**"
        TIMES =                              "*"
        DIVIDENTE_EQUAL =                       "/="
        DIVIDENTE =                             "/"
        MODULO_EQUAL =                       "%="
        MODULE =                             "module"
        MACRO_BLOCK_CLOSE =                  "%}"
        MACRO_BLOCK_OPEN =                   "{%"
//        MACRO_STATEMENT_OPEN =               "{{"
//        MACRO_STATEMENT_CLOSE =              "}}"
        ARRAY_EQUAL =                        "[]="
        ARRAY_BOOL =                         "[]?"
        ARRAY =                              "[]"
        QUESTION =                           "?"
        SEMICOLON =                          ";"
        NAMESPACE =                          "::"
        COLON =                              ":"
        TILDE =                              "~"
        DOT_DOT_DOT =                        "..."
        DOT_DOT =                            ".."
        AND_AND_EQUAL =                      "&&="
        AND_AND =                            "&&"
        AND_EQUAL =                          "&="
        AND =                                "&"
        OR_OR_EQUAL =                        "||="
        OR_OR =                              "||"
        OR_EQUAL =                           "|="
        CAROT_EQUAL =                        "^="
        CAROT =                              "^"
        AT_BRACKET =                         "@["
        AT =                                 "@"
        DOLLAR_TILDE =                       "$~"
        DOLLAR_QUESTION =                    "$?"
        CASE =                               "case"
        CLASS =                              "class"
        DEF =                                "def"
        DO =                                 "do"
        ELSE =                               "else"
        END =                                "end"
        IF =                                 "if"
        NIL =                                "nil"
        OF =                                 "of"
        REQUIRE =                            "require"
        WHEN =                               "when"
        YIELD =                              "yield"
        UNTIL =                              "until"
        ELSIF =                              "elsif"
        TRUE =                               "true"
        FALSE =                              "false"
        RAISE =                              "raise"

        INCLUDE =                            "include"
        EXTEND =                             "extend"
        RETURN =                             "return"
        BEGIN =                              "begin"
        LIB =                                "lib"
        FUN =                                "fun"
        TYPE =                               "type"
        STRUCT =                             "struct"
        UNION =                              "union"
        ENUM =                               "enum"
        MACRO =                              "macro"
        OUT =                                "out"
        AS =                                 "as"
        AS_QUESTION =                        "as?"
        TYPEOF =                             "typeof"
        FOR =                                "for"
        SELECT =                             "select"
        THEN =                               "then"
        RESCUE =                             "rescue"
        ENSURE =                             "ensure"
        IS_A_QUESTION =                      "is_a?"
        ALIAS =                              "alias"
        SIZEOF =                             "sizeof"
        NIL_QUESTION =                       "nil?"
        IN =                                 "in"
        WITH =                               "with"
        SELF =                               "self"
        SUPER =                              "super"
        PRIVATE =                            "private"
        ASM =                                "asm"
        PROTECTED =                          "protected"
        UNINITIALIZED =                      "uninitialized"
        INSTANCE_SIZEOF =                    "instance_sizeof"
        ABSTRACT =                           "abstract"
        POINTEROF =                          "pointerof"

        BREAK =                              "break"
        INITIALIZE =                         "initialize"
        NEW =                                "new"
        LOOP =                               "loop"
        PREPEND =                            "prepend"
        FAIL =                               "fail"
        GETTER =                             "getter"
        SETTER =                             "setter"
        PROPERTY =                           "property"
        CATCH =                              "catch"
        THROW =                              "throw"
        ABORT =                              "abort"
        AT_EXIT =                            "at_exit"
        AUTOLOAD =                           "autoload"
        BINDING =                            "binding"
        CALLCC =                             "callcc"
         CALLER =                            "caller"
        CALLER_LOCATIONS =                   "caller_locations"
        CHOMP =                              "chomp"
        CHOP =                               "chop"
        EVAL =                               "eval"
        EXEC =                               "exec"
        EXIT =                               "exit"
        EXIT_BANG =                          "exit!"
        FORK =                               "fork"
        FORMAT =                             "format"
        GETS =                               "gets"
        GLOBAL_VARIABLES =                   "global_variables"
        GSUB =                               "gsub"
        ITERATOR =                           "iterator"
        LAMBDA =                             "lambda"
        LOAD =                               "load"
        LOCAL_VARIABLES =                    "local_variables"
        OPEN =                               "open"
        P =                                  "p"
        PRINT =                              "print"
        PRINTF =                             "printf"
        PROC =                               "Proc"
        PUTC =                               "putc"
        PUTS =                               "puts"
        RAND =                               "rand"
        READLINE =                           "readline"
        READLINES =                          "readlines"
        SET_TRACE_FUNC =                     "set_trace_func"
        SLEEP =                              "sleep"
        SPAWN =                              "spawn"
        SPRINTF =                            "sprintf"
        SRAND =                              "srand"
        SUB =                                "sub"
        SYSCALL =                            "syscall"
        SYSTEM =                             "system"
        TEST =                               "test"
        TRACE_VAR =                          "trace_var"
        TRAP =                               "trap"
        UNTRACE_VAR =                        "untrace_var"
        WARN =                               "warn"

        LINE_COMMENT =                       'regexp:#.*'
        STRING         =                     'regexp:("([^\"\\]|\\.)*")'
        NUMBER_LITERAL =                     'regexp:(\+|\-)?(0b[01_]+|0o[0-7_]+|0x[a-fA-f\d_]+|[\d_]+)(\.[\d_]+)?(e[-+]?[\d_]+)?(_?(i|f|u)(8|16|32|64))?'
        CHAR_LITERAL   =                     "regexp:('([^'\\]|\\.)*')"

        IDENT               = "regexp:\w+"
        space               = 'regexp:\s+'
    ]
}


// 1. https://github.com/goruby/goruby/blob/master/goruby.bnf
// 2. http://docs.huihoo.com/ruby/ruby-man-1.4/yacc.html
// 3. https://www.cse.buffalo.edu/~regan/cse305/RubyBNF.pdf  -- THIS ONE CURRENTLY

// 4. https://docs.ruby-lang.org/ja/latest/doc/spec=2fbnf.html  -- 2.4 ?? Interesting

// maybe merge 1, 3 and 4 ??

crystalFile ::= item_*

private item_ ::= (statements | expressions)

private compositeStatement ::= (statements | expressions)


private expressions ::= expression [expressions]

requireStatement ::= 'require' requirePath
requirePath ::= stringLiteral {
    methods=[getPath getPathTextRange]
}

stringLiteral ::= STRING {
  implements = "com.intellij.psi.PsiLanguageInjectionHost"
  methods = [isValidHost updateText createLiteralTextEscaper getDecodedText]
}

expression ::=
    [call] 'do' ['|' [blockVariable] '|'] [compositeStatement] 'end'
    | 'undef' fname
    | aliasExpression
    | 'while' expression
    | 'unless' expression
    | 'until' expression
    | requireStatement
    | 'begin' '{' compositeStatement '}'
    | 'end' '{' compositeStatement '}'
    | lhs '=' expression
    | 'if' expression
    | 'return' callArgs
    | 'yield' [callArgs]
    | 'and' expression
    | 'or' expression
    | 'not' expression
    | command
    | '!' command
    | arg

aliasExpression ::= 'alias' IDENT EQUAL type


typee ::= procType                                            // Proc
    | toupleType
    | type ( COMMA type ) * ARRAY MINUS_GREATER type      // Proc Type->Type
    | type [LEFT_BRACKET (NUMBER_LITERAL) RIGHT_BRACKET]  // Array  Type[n]
    | type '.' CLASS
    | IDENT



procType ::= PROC LEFT_PAREN type type* RIGHT_PAREN
toupleType ::= LEFT_BRACE
    | 'NamedTuple' LEFT_PAREN (IDENT ':' type)(',' IDENT ':' type)* RIGHT_PAREN


call ::= function | command

command ::= operation callArgs
         | primaries ('.' | '::') command
         | 'super' callArgs
         | 'loop'

function ::= operation ['(' [callArgs] ')']
         | 'super' ['(' [callArgs] ')']
         | 'for' blockVariable 'in' expression 'do' compositeStatement 'end'
         | 'begin' compositeStatement {'rescue' [args] do compositeStatement} [('else' | 'ensure') compositeStatement] 'end'
         | 'class' IDENT ['<' IDENT]  [compositeStatement] 'end'
         | 'module' IDENT [compositeStatement] 'end'
         | 'def' fname argDecl [compositeStatement] 'end'
         | 'def' singleton ('.' | '::') fname argDecl compositeStatement 'end'

whenArgs ::= args [',' '*' arg] | '*' arg

blockVariable ::= lhs | mlhs

mlhs ::= mlhsItem ',' [mlhsItem (',' mlhsItem)*] [ '*' lhs] | '*' lhs

mlhsItem ::= lhs | '(' mlhs ')'

lhs ::=
   variable
   | primaries '[' [args] ']'
   | primaries '.' IDENT

mrhs ::= args [',' '*' arg] | '*' arg

private callArgs ::= args
       | args [',' assocs] [',' '*' args] [',' '&' arg]
       | assocs [',' '*' args] [',' '&' arg]
       | '*' arg [',' '&' arg] | '&' arg
       | command

private args ::= arg [',' args]

private arg ::= lhs '=' arg
  | lhs opAsgn arg
  | ('..' | '...' | '+'  | '-'  | '*'  | '/'  | '%'  | '**'  | '|'  | '^'
    | '&' | '<=>' | '>'  | '>=' | '<'  | '<=' | '==' | '===' | '!=' | '='
    | '!' | '~'   | '<<' |  '>>'| '&&' | '||') arg
  | 'defined?' arg
  | primaries

private primaries ::= primary [primaries]

private primary ::= '(' compositeStatement ')'
| literal
| variable
| '::' IDENT
| '[' [args] ']' [QUESTION]
| '[' [args [',']] ']' [QUESTION]
| assocArrays
| tuples
| 'return' ['(' [callArgs] ')']
| 'yield' ['(' [callArgs] ')']
| 'defined?' '(' arg ')'
| ('.' | '::') operation ['(' [callArgs] ')']
| function
| function '{' ['|' [blockVariable] '|'] compositeStatement '}'
| 'if' expression 'then' compositeStatement ['elsif' expression 'then' compositeStatement] ['else' compositeStatement] 'end'
| 'unless' expression 'then' compositeStatement ['else' compositeStatement] 'end'
| 'while' expression 'do' compositeStatement 'end'
| 'until' expression 'do' compositeStatement 'end'
| ('case'| 'select') [compositeStatement] 'when' whenArgs 'then' compositeStatement ['when' whenArgs 'then' compositeStatement] ['else' compositeStatement] 'end'
| 'puts' args
| 'break'

tuple ::= '{' args '}'

private tuples ::= tuple [',' tuple]

argDecl ::= '(' argList ')' | argList

argList ::= IDENT (',' IDENT)* [',' '*' [IDENT]][',' '&' IDENT]
| '*' IDENT [',' '&' IDENT]
| [ '&' IDENT]


singleton ::= variable | '(' expressions ')'

private assocArrays ::= assocArray [',' assocArrays]

assocArray ::= '{' assocs '}'

private assocs ::= assoc [',' assocs]

assoc ::= arg '=>' arg

variable ::= varName | 'nil' | 'self'

literal ::= ( NIL
                    | TRUE
                    | FALSE
                    | NUMBER_LITERAL
                    | CHAR_LITERAL
                    | STRING
                    | symbol)

opAsgn ::= '+='|'-='|'*='|'/='|'%='|'**=' |'&='|'|='|'ˆ='|'<<='|'>>=' |'&&='|'||='


symbol ::= ':' (fname | varName)

fname ::=  IDENT | '..' | '|' | '^'|'&'| '<=>' | '==' | '===' | '=~'  | '>' | '>=' | '<' | '<=' | '+' | '-' | '*' | '/'
             | '%'| '**' | '<<' | '>>' | '~' | '+@' | '-@' | '[]' | '[]='

private operation ::= (IDENT ['!' | '?']) | NEW | PRINT

varName ::= global | '@' IDENT | IDENT

global ::= '$' IDENT
